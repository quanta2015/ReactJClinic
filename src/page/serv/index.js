import React from 'react'import dayjs from 'dayjs'import { inject } from 'mobx-react'import { notification,Spin,Switch,Icon,Input,Modal,Result,TimePicker,DatePicker,Select,Tabs,Button,Table,message } from 'antd'@inject('mainStore')class Run extends React.Component {  constructor(props) {    super(props)    this.store = this.props.mainStore    this.state = {      loading: false,      showCmd: false,      showInf: false,      showCtl: false,      showAll: false,      sm: { scale:1, move: 0},      codeList: [],      cmdIndex: 0,      cmdList: [],      sttList: [],      bk: null,      fan: [],      wind: [],      items: [],      date: dayjs().format('YYYY-MM-DD'),      time: dayjs().format('HH:mm:ss'),      season:this.store.loadSeason(),      now: dayjs().format('YYYY-MM-DD HH:mm:ss'),      on: 0,    }  }  initVar =()=>{    this.setState({      fan: [],      bk: null,      items: [],      selItem: null,      sel: [0,0,0,0,0],      edit: false,      now: dayjs().format('YYYY-MM-DD HH:mm:ss'),    })  }  doTimer =()=>{    _TIME = setInterval(() => {       this.setState({now:dayjs().format('YYYY-MM-DD HH:mm:ss')})    },1000)  }  doTimerD =()=>{    _TIME_D = setInterval(() => {       this.doLoadSensorData()    },60000)  }  stopTimerD =()=> clearInterval(_TIME_D)  async componentDidMount() {    if (isN(this.store.currUser)) {      this.props.history.push("/login")    }else{      this.setState({ loading: true })      let r = await this.props.mainStore.post(urls.API_QRY_SYS_CODE, null)      let codeList = r.data      let code = (codeList.length===0)?null:codeList[0].code      this.setState({ loading: false, codeList:codeList, code: code})      this.doTimer()    }  }  doSelCode=async(e)=>{    this.setState({code: e})  }  doChgSea=async(e)=>{    let that = this    confirm({      title: '提示',      content: '您确认要切换运行模式？',      onOk() {        that.setState({season: e})        that.store.saveSeason(e)      }    });      }  formatDt=(d,t)=>{    d = d.split('-').join('')    t = t.split(':').join('')    return parseInt(`${d}${t}`)  }  formatData=(r)=>{    for(let k in r) {      let l = k.split('_')      let lastKey = l[l.length-1]      if (k==='fan_1_son') {        let on = parseInt(r[k])        this.setState({on: on})      }      if (k==='fan_1_son') {        let on = parseInt(r[k])        this.setState({on: on})      }      if (lastKey==='vls') {        r[k] = isN(r[k])?0:r[k]        r[k] = parseInt(r[k])?'自动':'手动'      }            if ((lastKey!=="vls")&&(k!=="code")&&(k!=="dt")&&(k!=="id")) {        let len = (lastKey === 'ffl')?0:1        if (isN(r[k])) {          r[k] =''        }else if (r[k]<0) {          r[k] =0        }else{          r[k] = parseFloat(r[k]).toFixed(len)        }      }    }  }  loadHis =(r)=>{    let {data} = this.state    for(let k in r) {      let l = k.split('_')      let lastKey = l[l.length-1]      if ((lastKey==="vls")||(lastKey==="son")||(k=="code")||(k=="dt")||(k=="id")) {        continue      }      if (isN(r[k])&&!isN(data[k])&&(data[k]!==0)) {        // console.log(data[k])        r[k] = data[k]      }    }  }  doLoadSensorData=async()=>{    let { code } = this.state    let params = { code: code }    let r = await this.props.mainStore.post(urls.API_QRY_SENSOR_DATA, params)    console.log(r.data,'format')    this.loadHis(r.data)    this.formatData(r.data)    this.setState({ data: r.data })  }  doLoadSysData=async()=>{    let { date, time, code } = this.state    let params = { code: code, dt: this.formatDt(date,time) }    console.log(params,'params')    this.stopTimerD()    this.initVar()    this.setState({ loading: true })    let r = await this.props.mainStore.post(urls.API_QRY_SYS_DATA_R, params)        console.log(r,'system data')    this.formatData(r.data)    r.cmd?.map((item,i)=>{      let c = code.toUpperCase().split('_')      item.dev = `${c[0]}-${c[1]}-1`    })    this.setState({ loading: false, code: code, data: r.data, cmdList: r.cmd, sttList:clone(r.cmd), pwd:r.pwd })    this.renderData(r.posi)    this.doTimerD()  }  renderData=async(d)=>{    let items = []    d.map((item,i)=>{      if (item.type === 'sys') {        this.setState({           bk:item.list.bk,           fan:item.list.list,           wind:item.list.wind,          sid: item.id         })      }else{        let max = 0        item.list.map((o,j)=>{          if (max<o.key.length) {max = o.key.length}        })        item.width = max*_pix        items.push(item)        this.setState({ items:items })      }    })  }  doShowCmd =(e)=>{    this.setState({cmdIndex:e, showCmd: true})  }    doSaveCmd=async()=>{    let {cmdList,cmdIndex, code} = this.state    let params = {      code: code,      dev: cmdList[cmdIndex].dev,      key: `${code}_${cmdList[cmdIndex].key}`,      v: cmdList[cmdIndex].v,      cmdList: cmdList,    }    this.setState({ loading: true })    let r = await this.props.mainStore.post(urls.API_CMD_SYS, params)    this.setState({ loading: false, cmdList: r.cmd, sttList: clone(r.cmd), showCmd: false, showDlg:false })    message.info('设定命令成功！')  }  doChgValue=(type,e)=>{    let v = e.currentTarget.value    let {cmdList,cmdIndex} = this.state    cmdList[cmdIndex][type] = v    this.setState({cmdList:cmdList})  }  doChgSwitch=(v,e)=>{    e.stopPropagation()    let {cmdList,cmdIndex} = this.state    cmdList[cmdIndex].v = v?1:0    this.setState({cmdList:cmdList})  }  doToggleInfo=()=>{    let {showInf} = this.state    this.setState({showInf: !showInf})  }  doShowDlg =()=>{    this.setState({showDlg:true})  }  doHideDlg =()=>{    this.setState({showDlg:false})  }  chgPwd=(e)=>{    let password = e.currentTarget.value    this.setState({password: password})  }  doCheckPwd=()=>{    let {password,pwd} = this.state    if (password === pwd) {      this.doSaveCmd()    }else{      message.error("密码错误！")    }  }  doShowCtl=(e)=>{    e.stopPropagation()    if (!isMobile()) {      this.setState({showCtl:true})    }else{      this.setState({cmdIndex:0, showCmd: true})    }  }  doHideCtl=(e)=>{    if (!isMobile()) return;    e.stopPropagation()    this.setState({showCtl:false, showCmd: false})  }  doBkSize= ({target:img})=> {    let sw = document.querySelector('html').clientWidth    let sh = document.querySelector('html').clientHeight    let bw = img.offsetWidth    let bh = img.offsetHeight    let scale = sw/bw    let move  = bh*(1-scale)/2    this.setState({sm: {scale: scale, move: move}, showAll: true})  }  doShowAll =()=>{    this.setState({showAll: !this.state.showAll})  }    render() {    let {showDlg,showInf,date,time,codeList,fan,bk,items,code,data,wind,now,season,cmdList,cmdIndex,sttList,on,showCtl,sm,showAll} = this.state    fan = (fan.length!==0)?fan[0]:{x:0,y:0,url:''}    let cmdItem = cmdList[cmdIndex]    let staList = []    let tmp = []    sttList.map((item,i)=>{      if ((i+1)%4!==0) {        tmp.push(item)      }else{        tmp.push(item)        staList.push(tmp)        tmp=[]      }    })    staList.splice(1,1)    // console.log(data,'data')    return (      <Spin spinning={this.state.loading}>        <div className="g-run">                    <div className="m-bd" onClick={this.doHideCtl}>            <div className="m-tab_list">              <div className="m-query">                <label>请选择系统型号</label>                <Select value={code} onChange={this.doSelCode} getPopupContainer={e=>e.parentNode}>                  {codeList.map((item,i)=>                    <Option value={item.code} key={i}>{item.code}</Option>                  )}                </Select>              </div>              <div className="m-query">                <div className="m-btn" onClick={this.doLoadSysData}>查询系统</div>                {(this.state.bk)&&                <div className="m-btn m-mb" onClick={this.doShowCtl}>控制系统</div>}              </div>              <div className="m-sep"></div>              {(this.state.bk)&&              <div className={(!showCtl)?"m-cmd":"m-cmd show"}>                {cmdList.map((item,i)=>                  <span key={i} onClick={this.doShowCmd.bind(this,i)}>{item.name}</span>                )}              </div>}              {(this.state.showCmd)&&              <div className="m-query m-query-mb">                                <label>DEV</label>                <div className="m-gp">                  <Input value={cmdItem.dev}  onChange={this.doChgValue.bind(this,'dev')}></Input>                </div>                <label>{cmdItem.name}设定</label>                <div className="m-gp">                  <Input value={`${this.state.code}_${cmdItem.key}`} readOnly></Input>                </div>                <label>数值</label>                <div className="m-gp">                  { (cmdItem.type === 1)&&                    <><Input value={cmdItem.v} onChange={this.doChgValue.bind(this,'v')} ></Input><i>{cmdItem.unit}</i></> }                  { (cmdItem.type === 2)&&                    <><Switch  checkedChildren="开" unCheckedChildren="关" checked={(cmdItem.v===0)?false:true} onChange={this.doChgSwitch}/></> }                  { (cmdItem.type === 3)&&                    <><Switch  checkedChildren="自动" unCheckedChildren="手动"  checked={(cmdItem.v===0)?false:true} onChange={this.doChgSwitch} /></> }                </div>                <div className="m-btn" onClick={this.doShowDlg}>保存设定</div>              </div>}            </div>            <div className="m-tab_cnt">              {(!this.state.bk)&& <div className="m-none"> 无系统数据</div>}              {(this.state.bk)&&              <div className="m-hd">                <div className="m-lt"> 空调系统 {code}</div>                <div className="m-rt">                  <span><Icon type="clock-circle"/>{now}</span>                </div>                <div className="m-md">                  <div className="m-more" onClick={this.doToggleInfo}></div>                  {staList.map((item,i)=>                    <div key={i} className={(showInf)?"m-wrap show":"m-wrap"}>                      {(i===1)&&<i>水阀</i>}                      {item.map((o,j)=>                        <div className="m-item" key={j}>                          <label>{(i===1)?o.name.replace('水阀',''):o.name}</label>                          {(o.type===1)&&<span data-unit={o.unit}>{o.v}</span>}                          {(o.type===2)&&<span>{(o.v===0)?'关':'开'}</span>}                          {(o.type===3)&&<span>{(o.v===0)?'手动':'自动'}</span>}                        </div>                      )}                    </div>                  )}                </div>                <div className="m-scale" onClick={this.doShowAll}>                  <img src={icon_sca} />                </div>              </div>}              {(this.state.bk)&&              <div className="m-sys_bk" style={(showAll)?{"transform":`scale(${sm.scale}) translateY(-${sm.move}px)`, "overflowY":"unset"}:{}}>                {(bk!==null)&& <img src={`${API_SERVER}/${bk}`} onLoad={this.doBkSize} /> }                <div className="m-season">                  <span className={(season===1)?"sel":""}>                    <img src={icon_win} onClick={this.doChgSea.bind(this,1)}/>                  </span>                  <span className={(season===0)?"sel":""}>                    <img src={icon_sum} onClick={this.doChgSea.bind(this,0)}/>                  </span>                </div>                {this.state.fan.map((item,i)=>                  <Draggable key={i} bounds="parent"                              position={{x: item.x, y: item.y}}                              handle="none" >                    <img src={`${API_SERVER}/img/${(on)?'fan.png':'fan_stop.png'}`} />                  </Draggable>                )}                {this.state.wind.map((item,i)=>                  <Draggable key={i} bounds="parent"                              position={{x: item.x, y: item.y}}                              handle="none" >                    <img src={`${API_SERVER}/img/${(on)?'wind.gif':'wind_stop.gif'}`} />                  </Draggable>                )}                {items.map((item,i)=>                  <Draggable key={i} bounds="parent" handle="none"                             defaultPosition={{x: item.x, y: item.y}}                              position={{x: item.x, y: item.y}}>                    <div className={(item.season*season===1)?"m-item fn-hide":"m-item"} >                      <div className={`m-tl ${item.type}`}>                        <strong className="m-id">{item.type}{item.ord}</strong>                        <span>{item.title}</span>                      </div>                      {item?.list?.map((o,j)=>                        <div className="m-row" key={j}>                          <div className="m-col" style={{'width':item.width}}>{o.key}</div>                          <div className="m-val" data-unit={o.unt}>{isN(data)?null:data[o.val]}</div>                        </div>                      )}                    </div>                  </Draggable>                )}              </div>}            </div>          </div>          {(showDlg)&&          <div className="m-dlg">            <div className="m-wrap">              <Result status="warning" title="该操作会设定远程空调机组." />              <span>请输入管理员密码</span>              <Input type="password" onChange={this.chgPwd}></Input>              <div className="m-row">                <Button onClick={this.doHideDlg}> 取消</Button>                <Button type="primary" onClick={this.doCheckPwd}> 确定</Button>              </div>            </div>          </div>}        </div>      </Spin>    );  }}export default Run